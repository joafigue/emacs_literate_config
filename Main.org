This is the main configuration file for Emacs, this file hold the rationale for the package choices and their minimal configurations.
Further configurations, if any, is available through additional sourced org-files in the specific org-directory

* Package repositories
It was already stated that I have no intention of using package outside melpa-stable, org, and the default gnu.

#+BEGIN_SRC emacs-lisp
  ;; Loading the chosen package repositories

  (setq package-archives
        '(("GNU ELPA"     . "http://elpa.gnu.org/packages/")
          ("MELPA Stable" . "https://stable.melpa.org/packages/")
          ("MELPA"        . "https://melpa.org/packages/")
          ("ORG" . "http://orgmode.org/elpa/")
          )
        package-archive-priorities
        '(("GNU ELPA"     . 11)
          ("MELPA Stable" . 10)
          ("ORG" . 8)
          ("MELPA"        . 0)
          ))
#+END_SRC

** Now use security
In order to avoid some security issues we need to set-up tls just as discussed in [[https://glyph.twistedmatrix.com/2015/11/editor-malware.html]]. Yhanks for the link on [[https://ogbe.net/emacsconfig.html]]
#+BEGIN_SRC emacs-lisp
  (setq tls-checktrust t)
  (setq gnutls-verify-error t)
  (let ((trustfile
         (replace-regexp-in-string
          "\\\\" "/"
          (replace-regexp-in-string
           "\n" ""
           (shell-command-to-string "python -m certifi")))))
    (setq tls-program
          (list
           (format "gnutls-cli%s --x509cafile %s -p %%p %%h"
                   (if (eq window-system 'w32) ".exe" "") trustfile))))

  (defun security//test-tls()
    (require 'cl)
    (let ((bad-hosts
           (loop for bad
                 in `("https://wrong.host.badssl.com/"
                      "https://self-signed.badssl.com/")
                 if (condition-case e
                        (url-retrieve
                         bad (lambda (retrieved) t))
                      (error nil))
                 collect bad)))
      (if bad-hosts
          (error (format "tls misconfigured; retrieved %s ok"
                         bad-hosts))
        (url-retrieve "https://badssl.com"
                      (lambda (retrieved) t))))
    )
#+END_SRC

* UI Customizations
The UI customizations, refer only to the "look-and-feel" of emacs, these include things like removing toolbars and color schemes, nothing game-breaking for any user
** Color theme
I use [[https://github.com/bbatsov/zenburn-emacs][Zenburn]] theme, because it looks well enough on both terminal and GUI modes (And I work a lot on the terminal). there are 2 main things to consider
1) For terminal use, you would like to customize the terminal color-scheme to a compatible one with zenburn so it will look OK
2) I have an optional feature to make the background transparent on terminal, but I'm not using it right now.
#+BEGIN_SRC emacs-lisp
  (use-package zenburn-theme
    :defer t
    :config
    ;; Define variables
    (setq jf-term-bg-def "#3f3f3f")
    (setq jf-term-bg-alt "nil")
    (defvar jf-term-bg jf-term-bg-def)
    ;; Apply BG color consistently
    (defun apply-bg-color (frame)
      "Apply special background color to a frame based on whether its a 'real'
       window or a console window."
      (select-frame frame)
      (if (window-system frame)
          (set-face-background 'default jf-term-bg-def frame)
        (set-face-background 'default jf-term-bg frame)))
    ;; Change default terminal BG color to allow transparency
    (defun toggle-term-bg()
      " Change the default BG color for terminal frames, and update
        current one "
      (interactive)
      (if (eq jf-term-bg jf-term-bg-def)
          (setq jf-term-bg jf-term-bg-alt)
        (setq jf-term-bg jf-term-bg-def))
        (apply-bg-color (selected-frame)))
    ;; Add hook to create frames
    (add-hook 'after-make-frame-functions 'apply-bg-color)
    :bind ("C-c p" . toggle-term-bg)
    :init
    (load-theme 'zenburn t)
    )

#+END_SRC
** UI items
I have no use for the menu-bar, the scroll bar, etc, so I disable them all
#+BEGIN_SRC emacs-lisp
  ;; Disable useless menu items
  (menu-bar-mode -1)
  (when (fboundp 'tool-bar-mode)
    (tool-bar-mode -1))
  (when (  fboundp 'scroll-bar-mode)
    (scroll-bar-mode -1))
#+END_SRC
Also I believe it's useful to have the column line marked
#+BEGIN_SRC emacs-lisp
  ;; Add column information
  (column-number-mode t)
#+END_SRC
** Editor variables
*** Saner defaults - Notabs etc
    These are smaller Emacs variables that modify its behavior slightly, such as disabling the bell, avoiding tabs in all files, etc.
 #+BEGIN_SRC emacs-lisp
   (setq inhibit-startup-message             t
         mouse-yank-at-point                 t
         confirm-nonexistent-file-or-buffer  t
         use-package-always-ensure           t      
         indent-tabs-mode                    nil
         visible-bell                        nil
         ring-bell-function                  nil; 'ignore
         custom-file                         "~/.emacs.d/.custom.el"
         ;; http://ergoemacs.org/emacs/emacs_stop_cursor_enter_prompt.html
         minibuffer-prompt-properties
         '(read-only t point-entered minibuffer-avoid-prompt face minibuffer-prompt))
 #+END_SRC
*** Easier confirmation
 Emacs use a =yes-or-no= query for several confirmations, which requires explicit typing of =yes= and =no= keywords, to simplify the flow, this is replaced by a simple =y-or-n= query which is accepted by typing =y= or =n= which is simpler and faster, as shown by [[http://www.emacswiki.org/emacs/YesOrNoP][emacs-wiki]]
 #+BEGIN_SRC emacs-lisp
   (defalias 'yes-or-no-p 'y-or-n-p)
 #+END_SRC
*** Disabling auto-save/backup
 Backup files =*~= and auto-save files scattered through the file-system are annoying, while I could send them all to a backup folder, I've decided against it because most files that I care about are under version control (git) so I have little reason to use them.
 #+BEGIN_SRC emacs-lisp
   ;; Disable auto-save/backup files
   (setq backup-inhibited t)
   (setq auto-save-default nil)
 #+END_SRC
*** Unsure Variables
I took most of these variables from emacs bootstrap, however I'm not sure if I want them.
 #+BEGIN_SRC emacs-lisp :tangle nil
 (setq
         ;; confirm-kill-emacs                  'y-or-n-p
         save-interprogram-paste-before-kill t
         ;; require-final-newline               t

         ;; Disable non selected window highlight
         cursor-in-non-selected-windows     nil
         highlight-nonselected-windows      nil
         ;; PATH
         ;; exec-path                          (append exec-path '("/usr/local/bin/"))
         ;; To actually insert tabs, use C-q <tab>

         fringes-outside-margins            t
         select-enable-clipboard            t
         )
 #+END_SRC
* Emacs packages configuration
  :PROPERTIES:
  :ID:       INSTALLED
  :COLUMNS:  %25ITEM(Packages installed)  %DESCRIPTION
  :END:
This section holds the configuration for the existing packages, and the installation instructions for several other packages even if I don't configure them

#+BEGIN: columnview :hlines 1 :id "INSTALLED"
| Packages installed           | DESCRIPTION                             |
|------------------------------+-----------------------------------------|
| Emacs packages configuration |                                         |
| Ido Mode                     | Easier file-buffer completion           |
| Undo tree                    | Better Undo-redo behavior               |
| Magit                        | Great Git interface                     |
| Org-mode                     | Org-mode configs                        |
| Ediff                        | Ediff configurations -- Beters defaults |
#+END:
** Ido Mode
   :PROPERTIES:
   :DESCRIPTION: Easier file-buffer completion
   :END:
Ido mode is very useful for file and buffer navigation, thanks to the flexible matching, since Ido-mode is built-in I only need minor configurations. For a more advanced guide on Ido-mode see [[https://www.masteringemacs.org/article/introduction-to-ido-mode][Mastering Emacs]]
#+BEGIN_SRC emacs-lisp
  ;; Small configuration for IDO-mode
  (setq ido-enable-flex-matching t)
  (setq ido-everywhere t)
  (ido-mode 1)
#+END_SRC
** Undo tree
   :PROPERTIES:
   :DESCRIPTION: Better Undo-redo behavior
   :END:
Undo tree is great for buffer edition, as it allows for a visual representation of the different states of the document through a tree. The tree representation is more comfortable than the default list analogy, and the fact that the buffer status is browse-able, makes it even better
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :config (global-undo-tree-mode 1))
#+END_SRC
** Magit
   :PROPERTIES:
   :DESCRIPTION: Great Git interface
   :END:
Magit is an awesome git-interface, in fact I dare to say that for a git user, Magit may be enough reason to use emacs
#+BEGIN_SRC emacs-lisp
  ;; Installing magit
  (use-package magit
    :init (setq magit-last-seen-setup-instructions "1.4.0"))
#+END_SRC

** Ediff
   :PROPERTIES:
   :DESCRIPTION: Ediff configurations -- Beters defaults
   :END:
This section is to fix the defaults for ediff, meaning to remove the additional window and use horizontal split by default
 #+BEGIN_SRC emacs-lisp
   (use-package ediff
     :config
     (setq ediff-window-setup-function 'ediff-setup-windows-plain)
     (setq ediff-split-window-function 'split-window-horizontally)
     (setq ediff-diff-options "-w"))

 #+END_SRC
** Org-mode
   :PROPERTIES:
   :DESCRIPTION: Org-mode configs
   :END:
[[http://orgmode.org/][Org-mode]] is a great package, and has so many features, that is hard to do a small summary, at the very least, the whole initialization file was written using it. The most simple customization for it is to use font-locking for the source fragments
#+BEGIN_SRC emacs-lisp
  ;; Pretty-printing for source blocks in org
  (setq org-src-fontify-natively t)
#+END_SRC
* Latex Configuration
#+BEGIN_SRC emacs-lisp
  ;; (use-package 'reftex
  ;;               :config   (add-hook 'LaTeX-mode-hook 'reftex-mode) ;reftex ON
  ;;               )
  (setq-default TeX-master nil)
  (add-hook 'LaTeX-mode-hook 'TeX-PDF-mode) ;turn on pdf-mode.  AUCTeX
                                          ;will call pdflatex to
                                          ;compile instead of latex.
  (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode) ;turn on math-mode by
                                          ;default
  (add-hook 'LaTeX-mode-hook 'flyspell-mode) ;turn on flyspell mode by
                                          ;default

  (setq reftex-plug-into-AUCTeX t)
  (setq TeX-auto-save t)
  (setq TeX-save-query nil)
  (setq TeX-parse-self t)
#+END_SRC
* Test commands
These are features that I use but I have yet to properly document.
** PDF
#+BEGIN_SRC emacs-lisp
  ;;  To see PDF in a sane way
  (use-package pdf-tools
    :init (pdf-tools-install))
#+END_SRC

** Highlight parenthesis
#+BEGIN_SRC emacs-lisp
  (use-package highlight-parentheses
    :init (setq hl-paren-colors '("Springgreen3" "IndianRed1" "IndianRed3" "IndianRed4"))
    :config
    (define-globalized-minor-mode global-highlight-parentheses-mode
      highlight-parentheses-mode
      (lambda ()
        (highlight-parentheses-mode t)))
    (global-highlight-parentheses-mode t))
#+END_SRC

** Eshell visual commands fix
#+BEGIN_SRC emacs-lisp
  (use-package eshell
    :config
    (add-hook 'eshell-mode-hook
              (lambda ()
                (add-to-list 'eshell-visual-commands "ipython")
                (add-to-list 'eshell-visual-commands "ipython2")
                (add-to-list 'eshell-visual-commands "maxima")
                )))

#+END_SRC

** Org-edit-latex
#+BEGIN_SRC emacs-lisp :results none
  (use-package org-edit-latex
    :config
    (add-hook 'org-mode-hook 'org-edit-latex-mode)
    )

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (latex . t)   ;; <== add latex to the list
     (python . t)
     (shell . t)
     (haskell . t)
     ))
#+END_SRC

** org-highlight latex
#+BEGIN_SRC emacs-lisp :results none
(setq org-highlight-latex-and-related '(latex))
#+END_SRC

** Ibuffer
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x C-b") 'ibuffer)
#+END_SRC

** langtool
Lantool is a tool for more advanced ortographical corrections coupled with gramatical enhancements
#+BEGIN_SRC emacs-lisp
(require 'langtool)
(setq langtool-java-classpath "/usr/share/languagetool:/usr/share/java/languagetool/")
#+END_SRC
** Create X-window frame
Many times I just use terminal emacs, however there are some situations where I need to open a document using the X-window capabilities (for example PDFs). In such scenarios I would have to launch a new instance of emacs client in the X-window, change the buffer and open the file.
Not anymore as I have developed a small function that will work just as "C-x 5 2", but will create an X-window emacsclient frame no mather from where I call it.

#+BEGIN_SRC emacs-lisp
  (defun jf/make-Xwindow-frame ()
    (interactive)
    (make-frame (list '(window-system . x))))

  (global-set-key (kbd "C-x 5 5") #'jf/make-Xwindow-frame)
#+END_SRC
* Final Emacs-Lisp
#+BEGIN_SRC emacs-lisp
(message "Finished loading")
;; No further configurations beyond this line
#+END_SRC
